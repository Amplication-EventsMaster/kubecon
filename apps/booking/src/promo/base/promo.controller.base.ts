/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PromoService } from "../promo.service";
import { PromoCreateInput } from "./PromoCreateInput";
import { Promo } from "./Promo";
import { PromoFindManyArgs } from "./PromoFindManyArgs";
import { PromoWhereUniqueInput } from "./PromoWhereUniqueInput";
import { PromoUpdateInput } from "./PromoUpdateInput";

export class PromoControllerBase {
  constructor(protected readonly service: PromoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Promo })
  async createPromo(@common.Body() data: PromoCreateInput): Promise<Promo> {
    return await this.service.createPromo({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Promo] })
  @ApiNestedQuery(PromoFindManyArgs)
  async promos(@common.Req() request: Request): Promise<Promo[]> {
    const args = plainToClass(PromoFindManyArgs, request.query);
    return this.service.promos({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Promo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async promo(
    @common.Param() params: PromoWhereUniqueInput
  ): Promise<Promo | null> {
    const result = await this.service.promo({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Promo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePromo(
    @common.Param() params: PromoWhereUniqueInput,
    @common.Body() data: PromoUpdateInput
  ): Promise<Promo | null> {
    try {
      return await this.service.updatePromo({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Promo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePromo(
    @common.Param() params: PromoWhereUniqueInput
  ): Promise<Promo | null> {
    try {
      return await this.service.deletePromo({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
